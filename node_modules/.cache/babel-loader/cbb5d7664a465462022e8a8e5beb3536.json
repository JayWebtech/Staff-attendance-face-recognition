{"ast":null,"code":"const Webcam = require('../helper/webcam');\n\nimport { globalState } from './useState';\n\nconst faceapi = require('../helper/faceApi.min.js');\n\nexport const SnapFace = () => {\n  const video = document.querySelector('#video');\n  let recog;\n  video.addEventListener('play', () => {\n    const canvas = faceapi.createCanvasFromMedia(video);\n    document.body.append(canvas);\n    const displaySize = {\n      width: video.width,\n      height: video.height\n    };\n    faceapi.matchDimensions(canvas, displaySize);\n    recog = setInterval(async () => {\n      const count = globalState.capturedFaces.value.length;\n\n      try {\n        const detections = await faceapi.detectSingleFace(video, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceExpressions();\n        const resizedDetections = faceapi.resizeResults(detections, displaySize);\n        canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);\n        faceapi.draw.drawDetections(canvas, resizedDetections);\n        faceapi.draw.drawFaceLandmarks(canvas, resizedDetections);\n\n        if (resizedDetections) {\n          if (count < 3) saveFace(resizedDetections);\n          document.querySelector('#alert').style.color = 'green';\n          document.querySelector('#alert').innerHTML = `Face found, Captured ${count} out of 3`;\n\n          if (count >= 3) {\n            await clearInterval(recog);\n            canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);\n            globalState.registerState.value++;\n          }\n        }\n      } catch {\n        if (count < 3) {\n          document.querySelector('#alert').style.color = 'red';\n          document.querySelector('#alert').innerHTML = `Can't find a Face, Please Adjust <br>  Captured ${count} out of 3`;\n        }\n      }\n    }, 1000);\n  });\n};","map":{"version":3,"sources":["/Users/kromate/Desktop/faceReg/fas/src/composibles/useAttendance.js"],"names":["Webcam","require","globalState","faceapi","SnapFace","video","document","querySelector","recog","addEventListener","canvas","createCanvasFromMedia","body","append","displaySize","width","height","matchDimensions","setInterval","count","capturedFaces","value","length","detections","detectSingleFace","TinyFaceDetectorOptions","withFaceLandmarks","withFaceExpressions","resizedDetections","resizeResults","getContext","clearRect","draw","drawDetections","drawFaceLandmarks","saveFace","style","color","innerHTML","clearInterval","registerState"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAAtB;;AACA,SAASC,WAAT,QAA4B,YAA5B;;AACA,MAAMC,OAAO,GAAGF,OAAO,CAAC,0BAAD,CAAvB;;AAEA,OAAO,MAAMG,QAAQ,GAAG,MAAM;AAC7B,QAAMC,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAd;AACA,MAAIC,KAAJ;AACAH,EAAAA,KAAK,CAACI,gBAAN,CAAuB,MAAvB,EAA+B,MAAM;AACpC,UAAMC,MAAM,GAAGP,OAAO,CAACQ,qBAAR,CAA8BN,KAA9B,CAAf;AACAC,IAAAA,QAAQ,CAACM,IAAT,CAAcC,MAAd,CAAqBH,MAArB;AACA,UAAMI,WAAW,GAAG;AAAEC,MAAAA,KAAK,EAAEV,KAAK,CAACU,KAAf;AAAsBC,MAAAA,MAAM,EAAEX,KAAK,CAACW;AAApC,KAApB;AACAb,IAAAA,OAAO,CAACc,eAAR,CAAwBP,MAAxB,EAAgCI,WAAhC;AACAN,IAAAA,KAAK,GAAGU,WAAW,CAAC,YAAY;AAC/B,YAAMC,KAAK,GAAGjB,WAAW,CAACkB,aAAZ,CAA0BC,KAA1B,CAAgCC,MAA9C;;AACA,UAAI;AACH,cAAMC,UAAU,GAAG,MAAMpB,OAAO,CAACqB,gBAAR,CAAyBnB,KAAzB,EAAgC,IAAIF,OAAO,CAACsB,uBAAZ,EAAhC,EAAuEC,iBAAvE,GAA2FC,mBAA3F,EAAzB;AACA,cAAMC,iBAAiB,GAAGzB,OAAO,CAAC0B,aAAR,CAAsBN,UAAtB,EAAkCT,WAAlC,CAA1B;AACAJ,QAAAA,MAAM,CAACoB,UAAP,CAAkB,IAAlB,EAAwBC,SAAxB,CAAkC,CAAlC,EAAqC,CAArC,EAAwCrB,MAAM,CAACK,KAA/C,EAAsDL,MAAM,CAACM,MAA7D;AACAb,QAAAA,OAAO,CAAC6B,IAAR,CAAaC,cAAb,CAA4BvB,MAA5B,EAAoCkB,iBAApC;AACAzB,QAAAA,OAAO,CAAC6B,IAAR,CAAaE,iBAAb,CAA+BxB,MAA/B,EAAuCkB,iBAAvC;;AACA,YAAIA,iBAAJ,EAAuB;AACtB,cAAGT,KAAK,GAAG,CAAX,EAAagB,QAAQ,CAACP,iBAAD,CAAR;AACbtB,UAAAA,QAAQ,CAACC,aAAT,CAAuB,QAAvB,EAAiC6B,KAAjC,CAAuCC,KAAvC,GAA+C,OAA/C;AACA/B,UAAAA,QAAQ,CAACC,aAAT,CAAuB,QAAvB,EAAiC+B,SAAjC,GAA8C,wBAAuBnB,KAAM,WAA3E;;AACA,cAAIA,KAAK,IAAI,CAAb,EAAgB;AACf,kBAAMoB,aAAa,CAAC/B,KAAD,CAAnB;AACAE,YAAAA,MAAM,CAACoB,UAAP,CAAkB,IAAlB,EAAwBC,SAAxB,CAAkC,CAAlC,EAAqC,CAArC,EAAwCrB,MAAM,CAACK,KAA/C,EAAsDL,MAAM,CAACM,MAA7D;AACAd,YAAAA,WAAW,CAACsC,aAAZ,CAA0BnB,KAA1B;AACA;AACD;AACD,OAhBD,CAgBE,MAAM;AACP,YAAIF,KAAK,GAAG,CAAZ,EAAe;AACdb,UAAAA,QAAQ,CAACC,aAAT,CAAuB,QAAvB,EAAiC6B,KAAjC,CAAuCC,KAAvC,GAA8C,KAA9C;AACA/B,UAAAA,QAAQ,CAACC,aAAT,CAAuB,QAAvB,EAAiC+B,SAAjC,GAA8C,mDAAkDnB,KAAM,WAAtG;AACA;AAED;AAGD,KA3BkB,EA2BhB,IA3BgB,CAAnB;AA4BA,GAjCD;AAkCA,CArCM","sourcesContent":["const Webcam = require('../helper/webcam')\nimport { globalState } from './useState';\nconst faceapi = require('../helper/faceApi.min.js')\n\nexport const SnapFace = () => {\n\tconst video = document.querySelector('#video')\n\tlet recog\n\tvideo.addEventListener('play', () => {\n\t\tconst canvas = faceapi.createCanvasFromMedia(video)\n\t\tdocument.body.append(canvas)\n\t\tconst displaySize = { width: video.width, height: video.height }\n\t\tfaceapi.matchDimensions(canvas, displaySize)\n\t\trecog = setInterval(async () => {\n\t\t\tconst count = globalState.capturedFaces.value.length\n\t\t\ttry {\n\t\t\t\tconst detections = await faceapi.detectSingleFace(video, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceExpressions()\n\t\t\t\tconst resizedDetections = faceapi.resizeResults(detections, displaySize)\n\t\t\t\tcanvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height)\n\t\t\t\tfaceapi.draw.drawDetections(canvas, resizedDetections)\n\t\t\t\tfaceapi.draw.drawFaceLandmarks(canvas, resizedDetections)\n\t\t\t\tif (resizedDetections) {\n\t\t\t\t\tif(count < 3)saveFace(resizedDetections)\n\t\t\t\t\tdocument.querySelector('#alert').style.color = 'green';\n\t\t\t\t\tdocument.querySelector('#alert').innerHTML = `Face found, Captured ${count} out of 3`\n\t\t\t\t\tif (count >= 3) {\n\t\t\t\t\t\tawait clearInterval(recog)\n\t\t\t\t\t\tcanvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height)\n\t\t\t\t\t\tglobalState.registerState.value++\n\t\t\t\t\t}\n\t\t\t\t} \n\t\t\t} catch {\n\t\t\t\tif (count < 3) {\n\t\t\t\t\tdocument.querySelector('#alert').style.color= 'red';\n\t\t\t\t\tdocument.querySelector('#alert').innerHTML = `Can't find a Face, Please Adjust <br>  Captured ${count} out of 3`\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\n\t\t}, 1000)\n\t});   \n}"]},"metadata":{},"sourceType":"module"}