{"ast":null,"code":"const Webcam = require('../helper/webcam');\n\nimport { ref } from 'vue';\nimport { globalState } from './useState';\n\nconst faceapi = require('../helper/faceApi.min.js');\n\nlet snappedFace = ref().value;\n\nconst snap = faceData => {\n  Webcam.snap(function (data_uri) {\n    snappedFace = data_uri;\n  });\n  console.log(globalState.capturedFaces.value);\n};\n\nexport const SnapFace = () => {\n  const video = document.querySelector('#video');\n  let recog;\n  video.addEventListener('play', () => {\n    const canvas = faceapi.createCanvasFromMedia(video);\n    document.body.append(canvas);\n    const displaySize = {\n      width: video.width,\n      height: video.height\n    };\n    faceapi.matchDimensions(canvas, displaySize);\n    recog = setInterval(async () => {\n      try {\n        const detections = await faceapi.detectSingleFace(video, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceExpressions();\n        const resizedDetections = faceapi.resizeResults(detections, displaySize);\n        canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);\n        faceapi.draw.drawDetections(canvas, resizedDetections);\n        faceapi.draw.drawFaceLandmarks(canvas, resizedDetections);\n\n        if (resizedDetections.detection.score.toFixed(2) > 0.7) {\n          await clearInterval(recog);\n          canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);\n          document.querySelector('#alert').style.color = 'green';\n          document.querySelector('#alert').innerHTML = 'Face found';\n        }\n      } catch {\n        document.querySelector('#alert').style.color = 'red';\n        document.querySelector('#alert').innerHTML = 'Can\\'t find a Face, Please Adjust';\n      }\n    }, 1000);\n  });\n};","map":{"version":3,"sources":["/Users/kromate/Desktop/faceReg/fas/src/composibles/useAttendance.js"],"names":["Webcam","require","ref","globalState","faceapi","snappedFace","value","snap","faceData","data_uri","console","log","capturedFaces","SnapFace","video","document","querySelector","recog","addEventListener","canvas","createCanvasFromMedia","body","append","displaySize","width","height","matchDimensions","setInterval","detections","detectSingleFace","TinyFaceDetectorOptions","withFaceLandmarks","withFaceExpressions","resizedDetections","resizeResults","getContext","clearRect","draw","drawDetections","drawFaceLandmarks","detection","score","toFixed","clearInterval","style","color","innerHTML"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAAtB;;AACA,SAASC,GAAT,QAAoB,KAApB;AACA,SAASC,WAAT,QAA4B,YAA5B;;AACA,MAAMC,OAAO,GAAGH,OAAO,CAAC,0BAAD,CAAvB;;AAEA,IAAII,WAAW,GAAGH,GAAG,GAAGI,KAAxB;;AAEA,MAAMC,IAAI,GAAIC,QAAD,IAAa;AACzBR,EAAAA,MAAM,CAACO,IAAP,CAAY,UAAUE,QAAV,EAAoB;AAC/BJ,IAAAA,WAAW,GAAGI,QAAd;AACA,GAFD;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAYR,WAAW,CAACS,aAAZ,CAA0BN,KAAtC;AACA,CAND;;AAQA,OAAO,MAAMO,QAAQ,GAAG,MAAM;AAC7B,QAAMC,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAd;AACA,MAAIC,KAAJ;AACAH,EAAAA,KAAK,CAACI,gBAAN,CAAuB,MAAvB,EAA+B,MAAM;AACpC,UAAMC,MAAM,GAAGf,OAAO,CAACgB,qBAAR,CAA8BN,KAA9B,CAAf;AACAC,IAAAA,QAAQ,CAACM,IAAT,CAAcC,MAAd,CAAqBH,MAArB;AACA,UAAMI,WAAW,GAAG;AAAEC,MAAAA,KAAK,EAAEV,KAAK,CAACU,KAAf;AAAsBC,MAAAA,MAAM,EAAEX,KAAK,CAACW;AAApC,KAApB;AACArB,IAAAA,OAAO,CAACsB,eAAR,CAAwBP,MAAxB,EAAgCI,WAAhC;AACAN,IAAAA,KAAK,GAAGU,WAAW,CAAC,YAAY;AAC/B,UAAI;AACH,cAAMC,UAAU,GAAG,MAAMxB,OAAO,CAACyB,gBAAR,CAAyBf,KAAzB,EAAgC,IAAIV,OAAO,CAAC0B,uBAAZ,EAAhC,EAAuEC,iBAAvE,GAA2FC,mBAA3F,EAAzB;AACA,cAAMC,iBAAiB,GAAG7B,OAAO,CAAC8B,aAAR,CAAsBN,UAAtB,EAAkCL,WAAlC,CAA1B;AACAJ,QAAAA,MAAM,CAACgB,UAAP,CAAkB,IAAlB,EAAwBC,SAAxB,CAAkC,CAAlC,EAAqC,CAArC,EAAwCjB,MAAM,CAACK,KAA/C,EAAsDL,MAAM,CAACM,MAA7D;AACArB,QAAAA,OAAO,CAACiC,IAAR,CAAaC,cAAb,CAA4BnB,MAA5B,EAAoCc,iBAApC;AACA7B,QAAAA,OAAO,CAACiC,IAAR,CAAaE,iBAAb,CAA+BpB,MAA/B,EAAuCc,iBAAvC;;AACA,YAAIA,iBAAiB,CAACO,SAAlB,CAA4BC,KAA5B,CAAkCC,OAAlC,CAA0C,CAA1C,IAA+C,GAAnD,EAAwD;AACvD,gBAAMC,aAAa,CAAC1B,KAAD,CAAnB;AACAE,UAAAA,MAAM,CAACgB,UAAP,CAAkB,IAAlB,EAAwBC,SAAxB,CAAkC,CAAlC,EAAqC,CAArC,EAAwCjB,MAAM,CAACK,KAA/C,EAAsDL,MAAM,CAACM,MAA7D;AACAV,UAAAA,QAAQ,CAACC,aAAT,CAAuB,QAAvB,EAAiC4B,KAAjC,CAAuCC,KAAvC,GAA+C,OAA/C;AACA9B,UAAAA,QAAQ,CAACC,aAAT,CAAuB,QAAvB,EAAiC8B,SAAjC,GAA6C,YAA7C;AAEA;AACD,OAbD,CAaE,MAAM;AACP/B,QAAAA,QAAQ,CAACC,aAAT,CAAuB,QAAvB,EAAiC4B,KAAjC,CAAuCC,KAAvC,GAA8C,KAA9C;AACA9B,QAAAA,QAAQ,CAACC,aAAT,CAAuB,QAAvB,EAAiC8B,SAAjC,GAA6C,mCAA7C;AAEA;AACD,KAnBkB,EAmBhB,IAnBgB,CAAnB;AAoBA,GAzBD;AA0BA,CA7BM","sourcesContent":["const Webcam = require('../helper/webcam')\nimport { ref } from 'vue';\nimport { globalState } from './useState';\nconst faceapi = require('../helper/faceApi.min.js')\n\nlet snappedFace = ref().value\n\nconst snap = (faceData)=> {\n\tWebcam.snap(function (data_uri) {\n\t\tsnappedFace = data_uri\n\t});\n\n\tconsole.log(globalState.capturedFaces.value)\n}\n\nexport const SnapFace = () => {\n\tconst video = document.querySelector('#video')\n\tlet recog\n\tvideo.addEventListener('play', () => {\n\t\tconst canvas = faceapi.createCanvasFromMedia(video)\n\t\tdocument.body.append(canvas)\n\t\tconst displaySize = { width: video.width, height: video.height }\n\t\tfaceapi.matchDimensions(canvas, displaySize)\n\t\trecog = setInterval(async () => {\n\t\t\ttry {\n\t\t\t\tconst detections = await faceapi.detectSingleFace(video, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceExpressions()\n\t\t\t\tconst resizedDetections = faceapi.resizeResults(detections, displaySize)\n\t\t\t\tcanvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height)\n\t\t\t\tfaceapi.draw.drawDetections(canvas, resizedDetections)\n\t\t\t\tfaceapi.draw.drawFaceLandmarks(canvas, resizedDetections)\n\t\t\t\tif (resizedDetections.detection.score.toFixed(2) > 0.7) {\n\t\t\t\t\tawait clearInterval(recog)\n\t\t\t\t\tcanvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height)\n\t\t\t\t\tdocument.querySelector('#alert').style.color = 'green';\n\t\t\t\t\tdocument.querySelector('#alert').innerHTML = 'Face found'\n                    \n\t\t\t\t} \n\t\t\t} catch {\n\t\t\t\tdocument.querySelector('#alert').style.color= 'red';\n\t\t\t\tdocument.querySelector('#alert').innerHTML = 'Can\\'t find a Face, Please Adjust'\n\t\t\t\t\n\t\t\t}\n\t\t}, 1000)\n\t});   \n}"]},"metadata":{},"sourceType":"module"}